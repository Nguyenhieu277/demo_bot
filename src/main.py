from langchain_core.output_parsers import StrOutputParser
from langchain_core.prompts import ChatPromptTemplate
from langchain.embeddings import HuggingFaceEmbeddings
from langchain_core.runnables import RunnablePassthrough
from langchain_core.runnables import RunnableMap
import google.generativeai as genai
from langchain_google_genai import ChatGoogleGenerativeAI
import streamlit as st
from get_mongoDB import MongoDBClient
import os
from dotenv import load_dotenv
import logging

# Set up page config
st.set_page_config(
    page_title="Tr·ª£ L√Ω L√Ω Thuy·∫øt ƒê·ªì Th·ªã",
    page_icon="üìä",
    layout="wide"
)

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()

# Initialize Google API
google_api_key = st.secrets["GOOGLE_API_KEY"]
genai.configure(api_key=google_api_key)

# Create MongoDB connection
@st.cache_resource
def initialize_mongo():
    return MongoDBClient()._connect()

mongo_client = initialize_mongo()
db = mongo_client.get_database('chatbotdb')

# Initialize LLM
@st.cache_resource
def initialize_llm():
    return ChatGoogleGenerativeAI(
        model='models/gemini-2.0-flash-thinking-exp-01-21',
        temperature=0.5,
        max_tokens=None,
        timeout=60,
        max_retries=2,
        convert_system_message_to_human=True,
        api_key=google_api_key
    )

llm = initialize_llm()

# Create prompt template
revised_template = ChatPromptTemplate.from_messages([
    ('system', """**Vai tr√≤:** B·∫°n l√† Tr·ª£ l√Ω AI chuy√™n s√¢u v·ªÅ L√Ω thuy·∫øt ƒê·ªì th·ªã, m·ªôt c·ªông t√°c vi√™n am hi·ªÉu v√† nhi·ªát t√¨nh.

**Nhi·ªám v·ª• ch√≠nh:** Gi·∫£i quy·∫øt c√°c c√¢u h·ªèi v√† b√†i to√°n v·ªÅ l√Ω thuy·∫øt ƒë·ªì th·ªã m√† ng∆∞·ªùi d√πng ƒë∆∞a ra. ƒêi·ªÅu n√†y bao g·ªìm gi·∫£i th√≠ch l√Ω thuy·∫øt, gi·∫£i b√†i t·∫≠p v√† **vi·∫øt m√£ code** cho c√°c thu·∫≠t to√°n li√™n quan khi ng∆∞·ªùi d√πng y√™u c·∫ßu.

**S·ª≠ d·ª•ng Th√¥ng tin Tham kh·∫£o (`context`):**
1.  **Hi·ªÉu r√µ C√¢u h·ªèi:** Lu√¥n b·∫Øt ƒë·∫ßu b·∫±ng vi·ªác ph√¢n t√≠ch k·ªπ y√™u c·∫ßu **c·ª• th·ªÉ** c·ªßa ng∆∞·ªùi d√πng.
2.  **Ph√¢n t√≠ch `context`:** X√°c ƒë·ªãnh v√† ph√¢n bi·ªát th√¥ng tin t·ª´ ngu·ªìn 'knowledge' (l√Ω thuy·∫øt) v√† 'exercises' (b√†i t·∫≠p m·∫´u).
3.  **T·ªïng h·ª£p Th√¥ng minh:** K·∫øt h·ª£p l√Ω thuy·∫øt v√† v√≠ d·ª• m·ªôt c√°ch linh ho·∫°t. D√πng l√Ω thuy·∫øt ƒë·ªÉ soi s√°ng ph∆∞∆°ng ph√°p trong b√†i t·∫≠p m·∫´u, v√† d√πng b√†i t·∫≠p m·∫´u ƒë·ªÉ minh h·ªça cho l√Ω thuy·∫øt. **Tuy·ªát ƒë·ªëi kh√¥ng sao ch√©p m√°y m√≥c.**
4.  **√Åp d·ª•ng Th·ª±c t·∫ø:** V·∫≠n d·ª•ng ki·∫øn th·ª©c ƒë√£ t·ªïng h·ª£p v√†o **ƒë√∫ng s·ªë li·ªáu v√† ƒëi·ªÅu ki·ªán** trong c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng.
5.  **X·ª≠ l√Ω Thi·∫øu th√¥ng tin:** N·∫øu `context` kh√¥ng ƒë·ªß ho·∫∑c kh√¥ng li√™n quan ƒë·ªÉ tr·∫£ l·ªùi, h√£y **n√™u r√µ ƒëi·ªÅu n√†y**. C·ªë g·∫Øng tr·∫£ l·ªùi d·ª±a tr√™n ki·∫øn th·ª©c chung n·∫øu c√≥ th·ªÉ, ho·∫∑c **ƒë·∫∑t c√¢u h·ªèi l√†m r√µ** cho ng∆∞·ªùi d√πng.

**C√°ch Tr·∫£ l·ªùi:**
* **∆Øu ti√™n s·ª± R√µ r√†ng:** Tr√¨nh b√†y m·ªçi gi·∫£i th√≠ch, l·ªùi gi·∫£i theo c√°c b∆∞·ªõc logic, m·∫°ch l·∫°c, d·ªÖ hi·ªÉu.
* **Gi·∫£i th√≠ch L√Ω thuy·∫øt:** ƒê·ªãnh nghƒ©a r√µ r√†ng, n√™u t√™n ƒë·ªãnh l√Ω (n·∫øu ph·ªï bi·∫øn), gi·∫£i th√≠ch c·∫∑n k·∫Ω c√°c kh√°i ni·ªám.
* **Gi·∫£i B√†i t·∫≠p:** Tr√¨nh b√†y chi ti·∫øt qu√° tr√¨nh gi·∫£i, gi·∫£i th√≠ch t·ª´ng b∆∞·ªõc t√≠nh to√°n. **L√†m n·ªïi b·∫≠t ƒë√°p s·ªë cu·ªëi c√πng.**
* **Vi·∫øt M√£ Code (N·∫øu y√™u c·∫ßu ho·∫∑c ph√π h·ª£p):**
    * Cung c·∫•p c√°c ƒëo·∫°n **m√£ code r√µ r√†ng, c√≥ th·ªÉ ch·∫°y ƒë∆∞·ª£c** (∆∞u ti√™n Python).
    * Gi·∫£i th√≠ch logic c·ªßa code, c√°c bi·∫øn quan tr·ªçng, v√† c√°ch s·ª≠ d·ª•ng/th·ª±c thi.
    * N√™u r√µ c√°c gi·∫£ ƒë·ªãnh ho·∫∑c gi·ªõi h·∫°n (v√≠ d·ª•: ƒë·ªô ph·ª©c t·∫°p, ki·ªÉu d·ªØ li·ªáu ƒë·∫ßu v√†o).
* **Ch·ªß ƒë·ªông & H·ªó tr·ª£:** N·∫øu th·∫•y ph√π h·ª£p, c√≥ th·ªÉ ƒë·ªÅ c·∫≠p ng·∫Øn g·ªçn ƒë·∫øn c√°c kh√°i ni·ªám li√™n quan ho·∫∑c ph∆∞∆°ng ph√°p thay th·∫ø. ƒê·ª´ng ng·∫°i **h·ªèi l·∫°i** n·∫øu y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng ch∆∞a r√µ r√†ng.
"""),
    ('human', "Th√¥ng tin tham kh·∫£o:\n```\n{context}\n```\n\nC√¢u h·ªèi c·ªßa t√¥i:\n{question}")
])

# Function to get embeddings
def get_embedding(text, model='models/gemini-embedding-exp-03-07'):
    result = genai.embed_content(model=model, content=text)
    return result["embedding"]

# Function to create context
def create_context_refined(
    query,
    db,
    knowledge_coll="knowledge",
    exercises_coll="exercises",
    vector_index="vector_index",
    embedding_field="embedding",
    knowledge_fields_map={"title": "head", "content": "define"},
    exercises_fields_map={"problem": "problem.content", "solution": "solution.content"},
    results_per_coll=5,
    num_candidates_multiplier=10,
    total_limit=10
):
    context_str = "Kh√¥ng t√¨m th·∫•y th√¥ng tin li√™n quan."
    try:
        query_embedding = get_embedding(query)
        if not query_embedding:
            logger.error("L·ªói: Kh√¥ng th·ªÉ t·∫°o embedding cho query.")
            return "L·ªói khi x·ª≠ l√Ω query embedding."

        num_candidates = results_per_coll * num_candidates_multiplier

        def build_projection(collection_name, fields_map):
            projection = {
                "_id": 0,
                "source": {"$literal": collection_name},
                "score": {"$meta": "vectorSearchScore"}
            }
            for display_name, actual_field in fields_map.items():
                projection[display_name] = f"${actual_field}"
            return projection

        knowledge_projection = build_projection(knowledge_coll, knowledge_fields_map)
        exercises_projection = build_projection(exercises_coll, exercises_fields_map)
        
        pipeline = [
            {
                "$vectorSearch": {
                    "index": vector_index,
                    "path": embedding_field,
                    "queryVector": query_embedding,
                    "limit": results_per_coll,
                    "numCandidates": num_candidates
                }
            },
            { "$project": knowledge_projection },
            {
                "$unionWith": {
                    "coll": exercises_coll,
                    "pipeline": [
                        {
                            "$vectorSearch": {
                                "index": "exercises",
                                "path": embedding_field,
                                "queryVector": query_embedding,
                                "limit": results_per_coll,
                                "numCandidates": num_candidates
                            }
                        },
                        { "$project": exercises_projection }
                    ]
                }
            },
            { "$sort": { "score": -1 } },
            { "$limit": total_limit }
        ]

        results = list(db[knowledge_coll].aggregate(pipeline))

        if results:
            formatted_context = ["Th√¥ng tin tham kh·∫£o ƒë∆∞·ª£c t√¨m th·∫•y:"]
            for i, doc in enumerate(results):
                source = doc.get('source', 'N/A')
                score = doc.get('score', 0)
                item_str = f"\n--- (K·∫øt qu·∫£ {i+1}) ---\n"

                fields_map = knowledge_fields_map if source == knowledge_coll else exercises_fields_map
                for display_name in fields_map.keys():
                     item_str += f"{display_name.capitalize()}: {doc.get(display_name, 'N/A')}\n"

                formatted_context.append(item_str.strip())

            context_str = "\n".join(formatted_context)

        return context_str

    except Exception as e:
        logger.error(f"L·ªói nghi√™m tr·ªçng khi t·∫°o context: {e}", exc_info=True)
        return f"ƒê√£ x·∫£y ra l·ªói khi truy xu·∫•t th√¥ng tin: {e}"

# Format documents
def format_docs(docs):
    return "\n\n".join([doc.get('define', '') for doc in docs if isinstance(doc, dict) and 'define' in doc])

# Create chain
@st.cache_resource
def create_chain():
    return (
        RunnableMap({
            "context": lambda x: x["context"],
            "question": lambda x: x["question"]
        })
        | revised_template
        | llm
        | StrOutputParser()
    )

chain = create_chain()

# Streamlit UI
st.title("üß† Tr·ª£ L√Ω L√Ω Thuy·∫øt ƒê·ªì Th·ªã")
st.markdown("""
Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Tr·ª£ l√Ω AI chuy√™n v·ªÅ L√Ω thuy·∫øt ƒê·ªì Th·ªã.
H√£y ƒë·∫∑t c√¢u h·ªèi v·ªÅ c√°c kh√°i ni·ªám, ƒë·ªãnh l√Ω, ho·∫∑c b√†i t·∫≠p ƒë·ªì th·ªã, t√¥i s·∫Ω c·ªë g·∫Øng gi√∫p b·∫°n!
""")

# Initialize session state for chat history
if "messages" not in st.session_state:
    st.session_state.messages = []

# Display chat messages
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Query input
query = st.chat_input("H√£y nh·∫≠p c√¢u h·ªèi v·ªÅ l√Ω thuy·∫øt ƒë·ªì th·ªã...")

# Process query
if query:
    # Add user message to chat history
    st.session_state.messages.append({"role": "user", "content": query})
    # Display user message
    with st.chat_message("user"):
        st.markdown(query)
    
    # Display assistant thinking
    with st.chat_message("assistant"):
        message_placeholder = st.empty()
        message_placeholder.markdown("ü§î ƒêang t√¨m ki·∫øm th√¥ng tin...")
        
        # Get context
        with st.spinner("ƒêang t√¨m ki·∫øm th√¥ng tin li√™n quan..."):
            context = create_context_refined(query, db)
        
        # Process with LLM
        with st.spinner("ƒêang ph√¢n t√≠ch v√† so·∫°n c√¢u tr·∫£ l·ªùi..."):
            result = chain.invoke({"context": context, "question": query})
        
        # Display result
        message_placeholder.markdown(result)
    
    # Add assistant response to chat history
    st.session_state.messages.append({"role": "assistant", "content": result})

# Sidebar with information
with st.sidebar:
    st.header("V·ªÅ ·ª©ng d·ª•ng n√†y")
    st.markdown("""
    ·ª®ng d·ª•ng n√†y s·ª≠ d·ª•ng c√¥ng ngh·ªá RAG (Retrieval Augmented Generation) ƒë·ªÉ:
    
    1. T√¨m ki·∫øm th√¥ng tin li√™n quan t·ª´ c∆° s·ªü d·ªØ li·ªáu MongoDB
    2. Ph√¢n t√≠ch v√† t·ªïng h·ª£p th√¥ng tin
    3. T·∫°o c√¢u tr·∫£ l·ªùi chi ti·∫øt cho ng∆∞·ªùi d√πng
    
    C∆° s·ªü d·ªØ li·ªáu ch·ª©a l√Ω thuy·∫øt v√† b√†i t·∫≠p v·ªÅ L√Ω thuy·∫øt ƒê·ªì th·ªã.
    """)
    
    
    
    